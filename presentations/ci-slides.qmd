---
title: "QGreenland-Net OGDC Project Overview"
date: "2025-04-18"
format: revealjs
author:
  - name: "{{< var people.robyn.name >}}"
    orcid: "{{< var people.robyn.orcid >}}"
  - name: "{{< var people.rushiraj.name >}}"
    orcid: "{{< var people.rushiraj.orcid >}}"
  - name: "{{< var people.alyona.name >}}"
    orcid: "{{< var people.alyona.orcid >}}"
  - name: "{{< var people.trey.name >}}"
    orcid: "{{< var people.trey.orcid >}}"
---


## Meet the team

<table>
  <tr>
    <td align="center">
      <img src="../_images/alyona.png" width="150"><br>
      <b>Alyona (ADC)</b>
    </td>
    <td align="center">
      <img src="../_images/rushiraj.png" width="150"><br>
      <b>Rushiraj (ADC)</b>
    </td>
  </tr>
  <tr>
    <td align="center">
      <img src="../_images/robyn.jpg" width="150"><br>
      <b>Robyn (NSIDC)</b>
    </td>
    <td align="center">
      <img src="../_images/TreyStafford.jpeg" width="150"><br>
      <b>Trey (NSIDC)</b>
    </td>
  </tr>
</table>

## Open Geospatioal Data Cloud

![](../_images/ogdc-chart1.png)

::: {.notes}
An initiative to manage and process geospatial data effective.
:::

## High Level OGDC Overview

![](../_images/ogdc-2.png)


## OGDC Operations

![](../_images/ogdc-11.png)

## OGDC Example

The [Water temperature, salinity, and position-geographic data taken from seal tags, in coastal Greenland from 2010-08-31 to 2012-05-14](https://arcticdata.io/catalog/view/urn%3Auuid%3A1f3f702f-9594-4293-8cbd-07932e54e8ed) dataset provides a simple use-case.

The primary data file is a `.csv` with no spatial metadata:

```text
"Cruise","Station","Type","Date","Longitude","Latitude","depth_from_surface","Pressure","Temperature","Salinity","Fluorescence","Oxygen"
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,0,2,5.639,29.87,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,3,5.6071,29.87,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,10,4.8221,30.2596,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,12,4.5924,30.4161,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,13,4.3179,30.586,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,17,3.6478,30.899,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,18,3.0415,31.252,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,20,2.2182,31.6582,999,999
"ct71-01-10",1,"B","2010-08-31 12:00",-43.3587,60.0247,NA,23,0.8525,32.2843,999,999
```

::: {.notes}
The (TODO: insert actual title) seal tags dataset is a CSV file with one record per seal.

This dataset is a good example of a simple one-step operation to take a non-geospatial ready data file and make it ready for analysis in QGreenland.

The data is in CSV, and uses  geographic coordinates (EPSPG:4326). The QGreenland project makes all included data consistently in the Polar Stereographic North (EPSG:3413) projection and strives to include all vector datasets as a geopackage (gpkg).

This can be accomplished through a single `ogr2ogr` command.
:::

## Making seal-tags "analysis-ready"

```bash
ogr2ogr \
  -lco ENCODING=UTF-8 \
  -makevalid \
  -s_srs "EPSG:4326" \
  -t_srs "EPSG:3413" \
  -oo X_POSSIBLE_NAMES=Longitude -oo Y_POSSIBLE_NAMES=Latitude \
  /output_dir/ct71_ODV_epsg3413.gpkg /input_dir/ct71_ODV.csv
```


::: {.notes}
To make the seal-tags dataset analysis-ready for QGreenland, we need to convert
to .gpkg and reproject to EPSG:3413.
:::


## How?

* Cloud-based distributed computing environment
  * Kubernetes
* Workflow management technology
  * Argo
* Integration with DataONE network of repositories
  * ADC-hosted with access to DataONE data
* A reusable mechanism for expressing what transformations are applied to a dataset
  * Recipes
* Open-source focus.
  * GitHub hosted code and recipes

:::{.notes}
The seal-tags example is a simple, one-step case. But we anticipate more complex
use-cases where there are many transformation operations distributed across
compute resources in a parallel fashion.

Also consider:
* Mechanism for triggering recipe builds via GitHub
:::


## OGDC Architecture

![](../_images/architecture-diagram.jpg)

## OGDC Recipes

![](../_images/ogdc-6.png)

::: {.notes}
Standardized procedures or scripts used within the OGDC to process and analyze geospatial data. Implementation of Argo to define, execute, and monitor workflows within the OGDC framework. Used in the ogdc-runner repository.
:::

## Example Recipe


`meta.yaml` file identifies key metadata, including the source to pull data from.
```yaml
name: "Water measurements from seal tag data"
id: "seal-tags"
inputs:
  urls:
    - "https://arcticdata.io/metacat/d1/mn/v2/object/urn%3Auuid%3A31162eb9-7e3b-4b88-948f-f4c99f13a83f"
```

`recipe.sh` is a bash file that lists a sequence of operations to transform the dataset.
```bash
ogr2ogr -lco ENCODING=UTF-8 -t_srs "EPSG:3413" -makevalid -s_srs "EPSG:4326" -oo X_POSSIBLE_NAMES=Longitude -oo Y_POSSIBLE_NAMES=Latitude /output_dir/ct71_ODV_epsg3413.gpkg /input_dir/ct71_ODV.csv
```

## OGDC Architecture

![](../_images/architecture-diagram.jpg)

## OGDC-runner

* Responsible for transforming a recipe into an Argo workflow that
* Python-based. Utilizes the Hera Python SDK for programatically constructing Argo workflows.

![](../_images/ogdc-runner.jpg)

::: {.notes}
A Python Software Development Kit designed to interact with Argo Workflows, simplifying the creation and management of workflows programmatically.
:::

## Argo Workflow Engine

![](../_images/ogdc-3.png)

::: {.notes}
A tool for orchestrating parallel tasks on Kubernetes, facilitating the management of complex workflows.
:::

## Handling workflows with Argo and K8s

![](../_images/ogdc-4.png)

::: {.notes}
Integration of Argo with Kubernetes to streamline workflow automation and scalability.
:::

## Seal-tag Argo Workflow

![](../_images/ogdc-12.png)

## Scaling Viz workflow

![](../_images/ogdc-9.png)

## Tiling Workflow

![](../_images/ogdc-10.png)

## References

TODO: add references to dev site and GitHub spaces of interest (e.g., with QR
code)


## Thank you!
